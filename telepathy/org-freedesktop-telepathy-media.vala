/* Generated by vala-dbus-binding-tool 0.3.3. Do not modify! */
/* Generated with: vala-dbus-binding-tool -v -v -v --gdbus --no-synced --directory=. --strip-namespace=tp */
using GLib;

namespace org {

	namespace freedesktop {

		namespace Telepathy {

			namespace Media {

				[DBus (name = "org.freedesktop.Telepathy.Media.StreamHandler", timeout = 120000)]
				public interface StreamHandler : GLib.Object {

					[DBus (name = "AddRemoteCandidate")]
					public signal void add_remote_candidate(string Candidate_ID, StreamHandlerTransportStruct[] Transports);

					[DBus (name = "Close")]
					public signal void close();

					[DBus (name = "CodecChoice")]
					public abstract void codec_choice(uint Codec_ID) throws DBusError, IOError;

					[DBus (name = "Error")]
					public abstract void error(uint Error_Code, string Message) throws DBusError, IOError;

					[DBus (name = "NativeCandidatesPrepared")]
					public abstract void native_candidates_prepared() throws DBusError, IOError;

					[DBus (name = "NewActiveCandidatePair")]
					public abstract void new_active_candidate_pair(string Native_Candidate_ID, string Remote_Candidate_ID) throws DBusError, IOError;

					[DBus (name = "NewActiveTransportPair")]
					public abstract void new_active_transport_pair(string Native_Candidate_ID, StreamHandlerNativeTransportStruct Native_Transport, string Remote_Candidate_ID, StreamHandlerRemoteTransportStruct Remote_Transport) throws DBusError, IOError;

					[DBus (name = "NewNativeCandidate")]
					public abstract void new_native_candidate(string Candidate_ID, StreamHandlerTransportStruct2[] Transports) throws DBusError, IOError;

					[DBus (name = "Ready")]
					public abstract void ready(StreamHandlerCodecStruct[] Codecs) throws DBusError, IOError;

					[DBus (name = "SetLocalCodecs")]
					public abstract void set_local_codecs(StreamHandlerCodecStruct2[] Codecs) throws DBusError, IOError;

					[DBus (name = "RemoveRemoteCandidate")]
					public signal void remove_remote_candidate(string Candidate_ID);

					[DBus (name = "SetActiveCandidatePair")]
					public signal void set_active_candidate_pair(string Native_Candidate_ID, string Remote_Candidate_ID);

					[DBus (name = "SetRemoteCandidateList")]
					public signal void set_remote_candidate_list(StreamHandlerRemoteCandidateStruct[] Remote_Candidates);

					[DBus (name = "SetRemoteCodecs")]
					public signal void set_remote_codecs(StreamHandlerCodecStruct23[] Codecs);

					[DBus (name = "SetStreamPlaying")]
					public signal void set_stream_playing(bool Playing);

					[DBus (name = "SetStreamSending")]
					public signal void set_stream_sending(bool Sending);

					[DBus (name = "StartTelephonyEvent")]
					public signal void start_telephony_event(uint8 Event);

					[DBus (name = "StartNamedTelephonyEvent")]
					public signal void start_named_telephony_event(uint8 Event, uint Codec_ID);

					[DBus (name = "StartSoundTelephonyEvent")]
					public signal void start_sound_telephony_event(uint8 Event);

					[DBus (name = "StopTelephonyEvent")]
					public signal void stop_telephony_event();

					[DBus (name = "StreamState")]
					public abstract void stream_state(uint State) throws DBusError, IOError;

					[DBus (name = "SupportedCodecs")]
					public abstract void supported_codecs(StreamHandlerCodecStruct234[] Codecs) throws DBusError, IOError;

					[DBus (name = "CodecsUpdated")]
					public abstract void codecs_updated(StreamHandlerCodecStruct2345[] Codecs) throws DBusError, IOError;

					[DBus (name = "SetStreamHeld")]
					public signal void set_stream_held(bool Held);

					[DBus (name = "HoldState")]
					public abstract void hold_state(bool Held) throws DBusError, IOError;

					[DBus (name = "UnholdFailure")]
					public abstract void unhold_failure() throws DBusError, IOError;

					[DBus (name = "SetRemoteFeedbackMessages")]
					public signal void set_remote_feedback_messages(GLib.HashTable<uint, StreamHandlerMessageStruct> Messages);

					[DBus (name = "SupportedFeedbackMessages")]
					public abstract void supported_feedback_messages(GLib.HashTable<uint, StreamHandlerMessageStruct2> Messages) throws DBusError, IOError;

					[DBus (name = "SetRemoteHeaderExtensions")]
					public signal void set_remote_header_extensions(StreamHandlerHeaderExtensionStruct[] Header_Extensions);

					[DBus (name = "SupportedHeaderExtensions")]
					public abstract void supported_header_extensions(StreamHandlerHeaderExtensionStruct2[] Header_Extensions) throws DBusError, IOError;
				}

				[DBus (name = "org.freedesktop.Telepathy.Media.SessionHandler", timeout = 120000)]
				public interface SessionHandler : GLib.Object {

					[DBus (name = "Error")]
					public abstract void error(uint Error_Code, string Message) throws DBusError, IOError;

					[DBus (name = "NewStreamHandler")]
					public signal void new_stream_handler(GLib.ObjectPath Stream_Handler, uint ID, uint Media_Type, uint Direction);

					[DBus (name = "Ready")]
					public abstract void ready() throws DBusError, IOError;
				}
			}
		}
	}
}
